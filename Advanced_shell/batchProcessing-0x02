#!/bin/bash

# A list of Pokémon to fetch, including one that will fail
pokemons=("Bulbasaur" "Ivysaur" "InvalidPokemon" "Venusaur" "Charmander" "Charmeleon")

# The directory to save the data in
output_dir="pokemon_data"

# --- Script Configuration ---
max_retries=3
retry_delay=2 # Seconds to wait between retries

# Create the directory if it doesn't exist
mkdir -p "$output_dir"

# Loop through each Pokémon in the list
for pokemon in "${pokemons[@]}"
do
    # Convert the name to lowercase for the API URL and filename
    lowercase_name=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')
    
    attempt=1
    success=false

    # Retry loop: continue until we succeed or run out of attempts
    while [ $attempt -le $max_retries ]; do
        echo "Fetching data for $lowercase_name... (Attempt $attempt of $max_retries)"

        # Execute curl and capture its exit code immediately
        curl -fs "https://pokeapi.co/api/v2/pokemon/$lowercase_name" -o "$output_dir/$lowercase_name.json"
        exit_code=$?

        # Check the exit code to see if the command was successful
        if [ $exit_code -eq 0 ]; then
            echo "Saved data to $output_dir/$lowercase_name.json ✅"
            success=true
            break # Exit the retry loop on success
        fi

        # If we reach here, the attempt failed.
        # Check if we have more retries left.
        if [ $attempt -lt $max_retries ]; then
            echo "Attempt failed. Retrying in $retry_delay seconds..."
            sleep $retry_delay
        fi

        # Increment the attempt counter
        attempt=$((attempt + 1))
    done

    # After the loop, if we never succeeded, log the final error
    if [ "$success" = false ]; then
        echo "ERROR: Failed to fetch data for $lowercase_name after $max_retries attempts. Skipping. ❌"
        # Clean up the empty file that curl might have created on failure
        rm -f "$output_dir/$lowercase_name.json"
    fi

    # Pause for 1 second between different Pokémon to be respectful to the API
    sleep 1
done