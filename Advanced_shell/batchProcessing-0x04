#!/bin/bash

# A list of Pokémon to fetch
pokemons=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")

# Use a new directory for this parallel task to avoid conflicts
output_dir="pokemon_data_parallel"

# Create the directory if it doesn't exist
mkdir -p "$output_dir"

# --- Define a function to fetch data for a single Pokémon ---
# This keeps the main loop clean and encapsulates the logic.
fetch_pokemon() {
    # Use 'local' to keep variables inside the function's scope
    local pokemon_name=$1
    local lower_name=$(echo "$pokemon_name" | tr '[:upper:]' '[:lower:]')
    local output_file="$output_dir/$lower_name.json"

    echo "INFO: Starting fetch for $lower_name..."

    # Use curl with -fs for silent failure and -o to specify the output file
    if curl -fs "https://pokeapi.co/api/v2/pokemon/$lower_name" -o "$output_file"; then
        echo "SUCCESS: Saved data for $lower_name ✅"
    else
        echo "ERROR: Failed to fetch data for $lower_name ❌"
        # Clean up the empty file that curl might have created on failure
        rm -f "$output_file"
    fi
}

# --- Main script execution ---

# Loop through each Pokémon and launch the fetch process in the background
for pokemon in "${pokemons[@]}"
do
    # Call the function and add '&' to run it in the background
    fetch_pokemon "$pokemon" &
done

# Use the 'wait' command to pause the script until all background jobs are done
echo "--------------------------------------------------"
echo "All fetch jobs launched. Waiting for them to complete..."
wait
echo "All Pokémon data has been fetched successfully."
echo "--------------------------------------------------"

# You can optionally add a final check here
echo "Final contents of $output_dir:"
ls -l "$output_dir"